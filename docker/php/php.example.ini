; add extra config here
; the php.ini file will copy to the /usr/local/etc/php/conf.d/php.ini

; static 和 动态属性会被警告
; https://github.com/phalcon/cphalcon/issues/16408
; https://github.com/php/php-src/blob/master/php.ini-production
; 当前 example 默认为 product 环境，注释提示为本地开发环境配置
; & ~E_DEPRECATED 是必须的，否则会有很多 Notice 导致一些功能无法正常使用

; --------------- Dev Setting Start
error_reporting=E_ALL & ~E_DEPRECATED
display_errors="On"
display_startup_errors="On"
; --------------- Dev Setting End

; --------------- Production Setting Start
;error_reporting=E_ALL & ~E_DEPRECATED & ~E_STRICT
;display_errors="Off"
;display_startup_errors="Off"
; --------------- Production Setting End

log_errors="On"
; 在 docker 中运行时，错误信息都被收集到 docker compose logs -f php
error_log=/var/log/php/php_errors.log

; 脚本最大内存
memory_limit = 16M
; 禁止打开远程地址
allow_url_fopen = Off
allow_url_include = Off
; 关闭注册全局变量
register_globals = Off
;open_basedir='/var/www'
; 防止 PHP 程序对脚本执行有权限
safe_mode_gid = Off
; 关闭危险的函数，某些 migrate 会使用到 system 等命令
;disable_functions = system,passthru,exec,shell_exec,popen,chmod,chown
; 每个脚本运行的最长时间
max_execution_time = 30
; 等待输入的最长时间
max_input_time = 60
; 上传文件最大许可
upload_max_filesize = 8M
post_max_size = 8M
; 输入变量允许嵌套的深度
max_input_nesting_level = 4
; 关闭 PHP 版本信息
expose_php = Off
; 防止 nginx 解析错误
cgi.fix_path = 0

fastcgi.logging = 0

; session 设置
; 如果 config/config.php 中的 session.driver == redis，则下面的值与 session.redis.lifetime 保持一致
session.cookie_lifetime = 3600
;session.gc-maxlifetime = 3600

; --------------- Production Setting Start
;[opcache]
;zend_extension=opcache.so
;opcache.enable=1
;opcache.enable_cli = 1
;opcache.jit_debug=0
;opcache.jit=1255
;opcache.jit_buffer_size=100M

;;opcache.enable_cli=0
;;可以缓存的 PHP 脚本文件的最大数量。如果应用程序有大量的 PHP 文件，可能需要增加这个值。
;;opcache.max_accelerated_files=10000
;; 单位是秒，这个值表示每隔多久检查一次PHP脚本是否需要重新缓存。设置为`60`意味着每60秒检查一次。
;; 如果设置为`0`，则表示每次请求都检查，这会降低性能，但对于开发环境可能比较有用，方便及时看到代码修改后的效果。
;;opcache.revalidate_freq=60
; --------------- Production Setting End

;https://www.jetbrains.com/help/idea/configuring-xdebug.html#configuring-xdebug-docker
; xdebug default is close, only open it in your local development env. follow the commands to open it

; --------------- Dev Setting Start
[xdebug]
zend_extension=xdebug.so
xdebug.mode=debug,develop
xdebug.discover_client_host=0
xdebug.idekey=docker
xdebug.start_with_request=yes
xdebug.client_port = 19003
xdebug.client_host=host.docker.internal

; 注意，无特殊需求，不需要开启下面 xdebug.log，否则会打印很多额外的信息，甚至导致测试失败
;xdebug.log = /dev/stdout
;xdebug.log = /var/log/php/xdebug.log
; --------------- Dev Setting Start


